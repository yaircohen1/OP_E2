        -:    0:Source:UDSserver.cpp
        -:    1:
        -:    2:#include "UDSserver.hpp"
        -:    3:
        -:    4:#define BUFFER_SIZE 1024
        -:    5:
        -:    6:using namespace std;
        -:    7:
        -:    8:// Create a Unix Domain Socket server using stream
       10:    9:int startUDSServerStream(const string &socketPath) {
        -:   10:    
        -:   11:    struct sockaddr_un server_addr; // Define the server_addr struct
        -:   12:    int listeningSocket; // Define the listening socket
        -:   13:
        -:   14:    /* Create the server socket stream */
       10:   15:    listeningSocket = socket(AF_UNIX, SOCK_STREAM, 0);
        -:   16:    
       10:   17:    if(listeningSocket < 0) // check if the socket was created successfully
        -:   18:    {
    #####:   19:        perror("socket");
    #####:   20:        return -1;
        -:   21:    }
        -:   22:
       10:   23:    cout<<"Server Socket Created"<<endl;
        -:   24:    
        -:   25:    /* In case the program exited unexpectedly, the socket file may still exist. */
        -:   26:    // remove the socket file if it exists (after initial it in strcpy)
        -:   27:    // Unlink the socket file if it exists
      10*:   28:    if (unlink(socketPath.c_str()) == -1 && errno != ENOENT) {
    #####:   29:        perror("unlink error");
    #####:   30:        close(listeningSocket);
    #####:   31:        return -1;
        -:   32:    }
       10:   33:    memset(&server_addr, 0, sizeof(server_addr));
        -:   34:    /* Set the server_addr struct values (Init its fields) */
       10:   35:    server_addr.sun_family = AF_UNIX;
        -:   36:    
        -:   37:    // Copy the socket path to the server_addr struct
       10:   38:    strncpy(server_addr.sun_path, socketPath.c_str(), sizeof(server_addr.sun_path) - 1);
        -:   39:
        -:   40:    /* 
        -:   41:        Bind the server socket to the server_addr struct 
        -:   42:        bins system call is telling the OS that if sender process sends the data setined to socket file descriptor,
        -:   43:        then the OS should deliver the data to the server_addr struct (the server process).
        -:   44:    */
       10:   45:    if(bind(listeningSocket, (const struct sockaddr *) &server_addr, sizeof(server_addr)) < 0)
        -:   46:    {
    #####:   47:        perror("Failed to bind");
    #####:   48:        close(listeningSocket);
    #####:   49:        return -1;
        -:   50:    }
        -:   51:
       10:   52:    cout<<"Bind Successfully "<<endl;
        -:   53:
        -:   54:    /*
        -:   55:        Prepare for accepting connection. the backlog size is set to 1.
        -:   56:        so while one request is being processed other requests can be waiting.
        -:   57:    */
       10:   58:    if(listen(listeningSocket, 1) < 0)
        -:   59:    {
    #####:   60:        perror("listen");
    #####:   61:        close(listeningSocket);
    #####:   62:        return -1;
        -:   63:    }
        -:   64:
       10:   65:    cout<<"UDS Server is waiting for connections..."<<endl;
        -:   66:    
       10:   67:    return listeningSocket; // Return the listening socket
        -:   68:}
        -:   69:
    #####:   70:int startUDSServerDatagram(const std::string &socketPath)
        -:   71:{
    #####:   72:    int serverSocket = socket(AF_UNIX, SOCK_DGRAM, 0); // Create the server socket stream 
        -:   73:
    #####:   74:    if(serverSocket < 0) // check if the socket was created successfully
        -:   75:    {
    #####:   76:        perror("socket");
    #####:   77:        return -1;
        -:   78:    }
    #####:   79:    else cout<<"Server UDS Socket Created"<<endl;
        -:   80:    
    #####:   81:    unlink(socketPath.c_str()); // remove the socket file if it exists (after initial it in strcpy)
        -:   82:    struct sockaddr_un server_addr; // Define the server_addr struct
    #####:   83:    server_addr.sun_family = AF_UNIX; // Set the server_addr struct values (Init its fields)
    #####:   84:    strncpy(server_addr.sun_path, socketPath.c_str(), sizeof(server_addr.sun_path) - 1); // Copy the socket path to the server_addr struct
        -:   85:   
        -:   86:    // Bind the server socket to the server_addr struct
    #####:   87:    if(bind(serverSocket, (const struct sockaddr *) &server_addr, sizeof(server_addr)) < 0)
        -:   88:    {
    #####:   89:        perror("Failed to bind");
    #####:   90:        close(serverSocket);
    #####:   91:        return -1;
        -:   92:    } 
    #####:   93:    else cout<<"Bind Successfully "<<endl;
        -:   94:
        -:   95:    struct sockaddr_un client_address; // Define the client_address struct
    #####:   96:    socklen_t client_address_len = sizeof(client_address); // Define the client_address_len - size of type sockaddr_un
        -:   97:    char buffer[BUFFER_SIZE]; // Define the buffer to store the message from the client
    #####:   98:    cout<<"Server is waiting for connections..."<<endl;
        -:   99:
        -:  100:    //Receive a message from the client
    #####:  101:    ssize_t bytesReceived = recvfrom(serverSocket, buffer, sizeof(buffer), 0, (struct sockaddr *)&client_address, &client_address_len);
        -:  102:    
    #####:  103:    if(bytesReceived < 0)
        -:  104:    {
    #####:  105:        perror("Failed to receive");
    #####:  106:        close(serverSocket);
    #####:  107:        return -1;
    #####:  108:    }else cout<<"Data Received Successfully - Num of Bytes: "<< bytesReceived <<endl;
        -:  109:
    #####:  110:    return serverSocket;
        -:  111:    }
